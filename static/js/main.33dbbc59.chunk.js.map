{"version":3,"sources":["Components/Statistic/Statistic.js","Components/Notification/Notification.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","Notification","message","FeedbackOptions","options","onLeaveFeedback","map","mark","type","onClick","name","Section","title","children","App","useState","setGood","setNeutral","setBad","setTotal","visibility","setVisibility","countTotalFeedback","prevTotal","positive","event","target","prevGood","prevNeutral","prevBad","Statistic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAwBeA,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAGf,sBAAKC,UAAU,kBAAf,UACoB,2CACA,uCAAUL,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCGTE,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAIlB,4BAAKA,KC2BOC,EA/BS,SAAC,GACxB,IAD0BC,EAC3B,EAD2BA,QAASC,EACpC,EADoCA,gBAGhC,OAEI,8BACKD,EAAQE,KAAI,SAAAC,GACT,OACK,wBACLC,KAAK,SACLC,QAASJ,EACTK,KAAMH,EAHD,SAKJA,UCFFI,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OAAO,qCACH,6BAAKD,IACJC,MCuDMC,MAjDf,WACE,MAAuBC,mBAAS,GAAhC,mBAAOpB,EAAP,KAAYqB,EAAZ,KACA,EAA8BD,mBAAS,GAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOlB,EAAP,KAAYqB,EAAZ,KACA,EAA0BH,mBAAS,GAAnC,mBAAOjB,EAAP,KAAcqB,EAAd,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAqBQC,EAAqB,WACzBH,GAAS,SAAAI,GAAS,OAAIA,EAAY,KAClCF,GAAc,IAKNG,EAAW7B,EAAOG,EAAQ,IAEhC,OAAO,qBAAKE,UAAU,YAAf,SACH,eAAC,EAAD,CAASY,MAAM,wBAAf,UACA,cAAC,EAAD,CAAiBR,QAHF,CAAC,OAAQ,UAAU,OAGKC,gBA7BvB,SAACoB,GAEvB,OADiBA,EAAMC,OAAdhB,MAEP,IAAK,OACHM,GAAQ,SAAAW,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHV,GAAW,SAAAW,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHV,GAAO,SAAAW,GAAO,OAAIA,EAAU,KAC5B,MACF,QAAS,OAGTP,OAgBKF,GACG,cAACU,EAAD,CAAYnC,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoByB,KAGxFJ,GAAa,cAAC,EAAD,CAAclB,QAAQ,4BCzClC6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33dbbc59.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) =>\n(\n    \n    <div className='statistic-field'>\n                        <h2>Statistic</h2>\n                        <p>Good: {good}</p>\n                        <p>Neutral: {neutral}</p>\n                        <p>Bad: {bad}</p>\n                        <p>Total: {total}</p>\n                        <p>Positive feedback: {positivePercentage} %</p>\n                    </div>\n    \n)\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n}\n\nexport default Statistics;","import PropTypes from 'prop-types'\n\nconst Notification = ({ message }) =>\n    \n(\n    \n   <p>{ message}</p>\n    \n)\n\nNotification.propTypes = {\n   message: PropTypes.string.isRequired,\n}\n\nexport default Notification;","import PropTypes from 'prop-types'\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n{\n    \n    return (\n    \n        <div>\n            {options.map(mark => {\n                return (\n                     <button\n                type=\"button\"\n                onClick={onLeaveFeedback}\n                name={mark}\n            >\n                {mark}\n            </button>\n                )\n            })}\n           \n    </div>\n    )\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.shape({\n        good: PropTypes.number,\n        neutral: PropTypes.number,\n        bad: PropTypes.number,\n    }).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n}\n\nexport default FeedbackOptions;","import PropTypes from 'prop-types'\nconst Section = ({ title, children }) => {\n    return <>\n        <h1>{title}</h1>\n        {children}\n    </>\n}\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nexport default Section;","import './App.css';\nimport './Feedback.css'\nimport { useState } from 'react'\nimport Statistics from './Components/Statistic'\nimport Notification from './Components/Notification'\nimport FeedbackOptions from './Components/FeedbackOptions'\nimport Section from './Components/Section'\n\n\n\nfunction App () {\n  const [good,setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [visibility, setVisibility] = useState(false);\n   \n    \n    const onLeaveFeedback = (event) => {\n        const {name} = event.target;\n      switch (name) {\n        case 'good':\n          setGood(prevGood => prevGood + 1)\n          break\n        case 'neutral':\n          setNeutral(prevNeutral => prevNeutral + 1)\n          break\n        case 'bad':\n          setBad(prevBad => prevBad + 1)\n          break\n        default: return;\n      }\n      \n        countTotalFeedback();\n    }\n  \n    const countTotalFeedback = () => {\n      setTotal(prevTotal => prevTotal + 1);\n      setVisibility(true);\n    }\n    \n  \n   \n        const positive = good / total * 100;\n        const arrayMarks = ['good', 'neutral','bad'];\n        return <div className=\"btn-field\">\n            <Section title=\"Please leave feedback\">\n            <FeedbackOptions options={arrayMarks } onLeaveFeedback={onLeaveFeedback}></FeedbackOptions>\n            \n            {visibility &&\n                <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positive} />\n                }\n                \n            {!visibility&& <Notification message=\"No feedback given\"/>}\n            </Section>\n            \n        </div>\n    \n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}